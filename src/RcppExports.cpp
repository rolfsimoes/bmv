// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// neighborhood
arma::mat neighborhood(const arma::mat& m, int m_nrow, int m_ncol, const arma::mat& w, int m_i, int m_j);
RcppExport SEXP _bmv_neighborhood(SEXP mSEXP, SEXP m_nrowSEXP, SEXP m_ncolSEXP, SEXP wSEXP, SEXP m_iSEXP, SEXP m_jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type m_nrow(m_nrowSEXP);
    Rcpp::traits::input_parameter< int >::type m_ncol(m_ncolSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m_i(m_iSEXP);
    Rcpp::traits::input_parameter< int >::type m_j(m_jSEXP);
    rcpp_result_gen = Rcpp::wrap(neighborhood(m, m_nrow, m_ncol, w, m_i, m_j));
    return rcpp_result_gen;
END_RCPP
}
// post_mean_x
arma::colvec post_mean_x(const arma::colvec& x, const arma::mat& sigma, const arma::colvec& mu0, const arma::mat& sigma0, double nu);
RcppExport SEXP _bmv_post_mean_x(SEXP xSEXP, SEXP sigmaSEXP, SEXP mu0SEXP, SEXP sigma0SEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma0(sigma0SEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(post_mean_x(x, sigma, mu0, sigma0, nu));
    return rcpp_result_gen;
END_RCPP
}
// bayes_multiv_smooth
arma::mat bayes_multiv_smooth(const arma::mat& m, int m_nrow, int m_ncol, const arma::mat& w, const arma::mat& sigma, double nu, bool covar);
RcppExport SEXP _bmv_bayes_multiv_smooth(SEXP mSEXP, SEXP m_nrowSEXP, SEXP m_ncolSEXP, SEXP wSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP covarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type m_nrow(m_nrowSEXP);
    Rcpp::traits::input_parameter< int >::type m_ncol(m_ncolSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< bool >::type covar(covarSEXP);
    rcpp_result_gen = Rcpp::wrap(bayes_multiv_smooth(m, m_nrow, m_ncol, w, sigma, nu, covar));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bmv_neighborhood", (DL_FUNC) &_bmv_neighborhood, 6},
    {"_bmv_post_mean_x", (DL_FUNC) &_bmv_post_mean_x, 5},
    {"_bmv_bayes_multiv_smooth", (DL_FUNC) &_bmv_bayes_multiv_smooth, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_bmv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
